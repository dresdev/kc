class HomeStorage{static getContinueWatchingList(){const t=localStorage.getItem("continueWatching");return t?JSON.parse(t):[]}static getMyList(){const t=localStorage.getItem("myList");return t?JSON.parse(t):[]}static isInMyList(t){return this.getMyList().some((s=>s.id===t))}static addToMyList(t){const s=this.getMyList();if(!this.isInMyList(t.id)){const e={id:t.id,title:t.title,poster:t.poster,heroImage:t.heroImage,languages:t.languages,addedAt:Date.now()};return s.push(e),localStorage.setItem("myList",JSON.stringify(s)),!0}return!1}static removeFromMyList(t){const s=this.getMyList(),e=s.filter((s=>s.id!==t));return localStorage.setItem("myList",JSON.stringify(e)),e.length!==s.length}static toggleMyList(t){return this.isInMyList(t.id)?{action:"removed",success:this.removeFromMyList(t.id)}:{action:"added",success:this.addToMyList(t)}}}
class Slider{constructor(t,e=6){this.container=t,this.track=t.querySelector(".slider-track"),this.prevBtn=t.querySelector(".prev-btn"),this.nextBtn=t.querySelector(".next-btn"),this.itemsPerView=e,this.currentIndex=0,this.itemWidth=0,this.maxIndex=0,this.init()}init(){this.calculateDimensions(),this.setupEventListeners(),this.updateButtons(),window.addEventListener("resize",(()=>{this.calculateDimensions(),this.updatePosition()}))}calculateDimensions(){const t=this.track.children;if(0===t.length)return;const e=this.container.querySelector(".slider-container").offsetWidth,i=t.length;window.innerWidth<=480?this.itemsPerView=2.5:window.innerWidth<=768?this.itemsPerView=3.5:window.innerWidth<=1024?this.itemsPerView=4.5:this.itemsPerView=6,this.itemWidth=e/this.itemsPerView,this.maxIndex=Math.max(0,i-this.itemsPerView),this.currentIndex=Math.min(this.currentIndex,this.maxIndex)}setupEventListeners(){this.prevBtn?.addEventListener("click",(()=>this.prev())),this.nextBtn?.addEventListener("click",(()=>this.next()))}prev(){this.currentIndex>0&&(this.currentIndex=Math.max(0,this.currentIndex-this.itemsPerView),this.updatePosition())}next(){this.currentIndex<this.maxIndex&&(this.currentIndex=Math.min(this.maxIndex,this.currentIndex+this.itemsPerView),this.updatePosition())}updatePosition(){const t=-this.currentIndex*this.itemWidth;this.track.style.transform=`translateX(${t}px)`,this.updateButtons()}updateButtons(){this.prevBtn&&this.nextBtn&&(this.prevBtn.style.opacity=this.currentIndex>0?"1":"0",this.nextBtn.style.opacity=this.currentIndex<this.maxIndex?"1":"0")}}function reinitializeSliders(){clearTimeout(window.resizeTimeout),window.resizeTimeout=setTimeout((()=>{document.querySelectorAll(".content-slider").forEach((t=>{new Slider(t)}))}),250)}window.addEventListener("resize",reinitializeSliders);
class ContentRenderer{static renderHeroSection(){const e=document.getElementById("heroSection");e&&(e.innerHTML=`\n            <div class="hero-background">\n                <img src="${HERO_CONFIG.heroImage}" alt="Featured Content" class="hero-image">\n                <div class="hero-gradient"></div>\n            </div>\n            <div class="hero-content">\n                <div class="hero-info">\n                    <h1 class="hero-title" style="display: none;">${HERO_CONFIG.title}</h1>\n                    <img src="${HERO_CONFIG.logoImage}" alt="${HERO_CONFIG.logoAlt}" class="hero-logo">\n                    <div class="hero-meta">\n                        <span class="rating">${HERO_CONFIG.rating}</span>\n                        <span class="year">${HERO_CONFIG.year}</span>\n                        <span class="seasons">${HERO_CONFIG.seasons}</span>\n                    </div>\n                    <div class="hero-buttons">\n                        <a href="${HERO_CONFIG.playUrl}" class="hero-btn play-btn">\n                            <span class="material-symbols-outlined">play_arrow</span>\n                            Reproducir\n                        </a>\n                        <button class="add-to-list-btn" id="heroAddToListBtn"\n                            data-serie-id="${HERO_CONFIG.serieId}"\n                            data-title="${HERO_CONFIG.serieTitle}"\n                            data-poster="${HERO_CONFIG.seriePoster}"\n                            data-hero-image="${HERO_CONFIG.serieHeroImage}"\n                            data-languages="${HERO_CONFIG.languages}">\n                            <span class="material-symbols-outlined add-icon">add</span>\n                            <span class="material-symbols-outlined check-icon">check</span>\n                            <span class="btn-text">Mi lista</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `)}static renderContentSections(){const e=document.getElementById("contentSections");if(!e)return;let t="";CONTENT_SECTIONS_CONFIG.forEach((e=>{if(e.enabled){let n="",i="";if("continueWatching"!==e.id&&"myList"!==e.id||(i=' style="display: none;"'),"renderSection"===e.method)n=`\n                        <section class="content-section">\n                            <h2 class="section-title">${e.title}</h2>\n                            <div class="content-slider">\n                                <div class="slider-container">\n                                    <div class="slider-track" id="${e.sliderId}">\n                                        \x3c!-- Cards will be populated by JavaScript --\x3e\n                                    </div>\n                                </div>\n                            </div>\n                        </section>\n                    `;else{const t="continueWatching"===e.id?"continueWatchingSlider":"top10"===e.id?"top10Slider":"myList"===e.id?"myListSlider":e.id+"Slider";n=`\n                        <section class="content-section" id="${e.id}Section"${i}>\n                            <h2 class="section-title">${e.title}</h2>\n                            <div class="content-slider">\n                                <div class="slider-container">\n                                    <div class="slider-track" id="${t}">\n                                        \x3c!-- Cards will be populated by JavaScript --\x3e\n                                    </div>\n                                </div>\n                            </div>\n                        </section>\n                    `}t+=n}})),e.innerHTML=t}static renderContinueWatching(){const e=HomeStorage.getContinueWatchingList(),t=document.getElementById("continueWatchingSection"),n=document.getElementById("continueWatchingSlider");0===e.length?t.style.display="none":(t.style.display="block",n.innerHTML="",e.forEach((e=>{const t=this.createContinueWatchingCard(e);n.appendChild(t)})),new Slider(t.querySelector(".content-slider")))}static createContinueWatchingCard(e){const t=document.createElement("a");return t.className="continue-card",t.href=`go:${e.serieId}`,t.style.textDecoration="none",t.style.color="inherit",t.innerHTML=`\n            <img src="${e.episodeThumbnail||e.seriePoster}" alt="${e.serieTitle}" class="continue-card-image">\n            <div class="continue-card-overlay">\n                <span class="material-symbols-outlined play-icon">play_arrow</span>\n            </div>\n            <div class="continue-progress">\n                <div class="continue-progress-fill" style="width: ${e.progress||0}%"></div>\n            </div>\n            <div class="continue-info">\n                <div class="continue-title">${e.serieTitle}</div>\n                <div class="continue-episode">T${e.season}E${e.episode}</div>\n            </div>\n        `,t}static renderTop10(){const e=document.getElementById("top10Slider");e.innerHTML="",CONTENT_DATA.top10.forEach((t=>{const n=this.createTop10Card(t);e.appendChild(n)})),new Slider(document.querySelector("#top10Slider").closest(".content-slider"))}static createTop10Card(e){const t=document.createElement("a");return t.className="top10-card content-card",t.href=`go:${e.id}`,t.style.textDecoration="none",t.style.color="inherit",t.innerHTML=`\n            <div class="top10-number">#${e.position}</div>\n            <img src="${e.image}" alt="${e.title}" class="card-image">\n        `,t}static renderSection(e,t){const n=document.getElementById(e);n.innerHTML="",t.forEach((e=>{const t=this.createContentCard(e);n.appendChild(t)})),new Slider(document.querySelector(`#${e}`).closest(".content-slider"))}static createContentCard(e){const t=document.createElement("a");t.className="content-card",t.href=e.id?`go:${e.id}`:"#!",t.style.textDecoration="none",t.style.color="inherit";const n=e.poster||e.image;return t.innerHTML=`\n            <img src="${n}" alt="${e.title}" class="card-image">\n            <div class="card-info">\n                <div class="card-title">${e.title}</div>\n                <div class="card-audio">${e.languages||"Lat | Sub"}</div>\n            </div>\n        `,t}static createMyListCard(e){const t=document.createElement("a");return t.className="content-card",t.href=`go:${e.id}`,t.style.textDecoration="none",t.style.color="inherit",t.innerHTML=`\n            <img src="${e.poster}" alt="${e.title}" class="card-image">\n            <div class="card-info">\n                <div class="card-title">${e.title}</div>\n            </div>\n        `,t}static renderMyList(){const e=HomeStorage.getMyList(),t=document.getElementById("myListSection"),n=document.getElementById("myListSlider");0===e.length?t.style.display="none":(t.style.display="block",n.innerHTML="",e.forEach((e=>{const t=this.createMyListCard(e);n.appendChild(t)})),new Slider(t.querySelector(".content-slider")))}static initHeroSection(){const e=document.querySelector(".play-btn"),t=document.querySelector("#heroAddToListBtn");if(e?.addEventListener("click",(()=>{console.log("Play hero content")})),t?.addEventListener("click",(()=>{const e={id:t.dataset.serieId,title:t.dataset.title,poster:t.dataset.poster,heroImage:t.dataset.heroImage,languages:t.dataset.languages},n=HomeStorage.toggleMyList(e);n.success&&(this.updateAddToListButtonState(t,"added"===n.action),this.renderMyList())})),t){const e=HomeStorage.isInMyList(t.dataset.serieId);this.updateAddToListButtonState(t,e)}}static updateAddToListButtonState(e,t){t?e.classList.add("in-list"):e.classList.remove("in-list")}static initAllSections(){console.log("🎬 Initializing content sections..."),this.renderHeroSection(),this.renderContentSections(),this.initHeroSection(),CONTENT_SECTIONS_CONFIG.forEach((e=>{if(e.enabled)switch(e.method){case"renderContinueWatching":this.renderContinueWatching();break;case"renderTop10":this.renderTop10();break;case"renderSection":if(e.sliderId&&e.dataSource){const t=getDataFromSource(e.dataSource);this.renderSection(e.sliderId,t)}break;case"renderMyList":this.renderMyList();break;default:console.warn("Unknown section method:",e.method)}})),console.log("✅ Content sections initialized!")}}function getDataFromSource(e){try{if(e.startsWith("CONTENT_DATA.")){const t=e.replace("CONTENT_DATA.","");return CONTENT_DATA[t]||[]}return[]}catch(t){return console.warn("Error getting data from source:",e,t),[]}}

class NavigationManager{static init(){this.renderNavigation(),this.attachEventListeners()}static renderNavigation(){const t=getNavigationConfig(),e=document.querySelector(".bottom-navigation");if(!t.enabled||!e)return;const a=[{key:"home",url:t.homeUrl,isActive:!0},{key:"search",url:t.searchUrl,isActive:!1},{key:"library",url:t.libraryUrl,isActive:!1},{key:"settings",url:t.settingsUrl,isActive:!1}];e.innerHTML="",a.forEach((a=>{const i=this.createNavItem(a,t);e.appendChild(i)}))}static createNavItem(t,e){const a=document.createElement("a");return a.href=t.url,a.className="bottom-nav-item"+(t.isActive?" active":""),a.dataset.navKey=t.key,a.innerHTML=`\n            <span class="material-symbols-outlined bottom-nav-icon">${e.icons[t.key]}</span>\n            <span class="bottom-nav-text">${e.labels[t.key]}</span>\n        `,a}static attachEventListeners(){const t=document.querySelectorAll(".bottom-nav-item");t.forEach((e=>{e.addEventListener("click",(e=>{t.forEach((t=>t.classList.remove("active"))),e.currentTarget.classList.add("active"),console.log("Navigation clicked:",e.currentTarget.dataset.navKey)}))}))}static updateNavigation(t){updateNavigationConfig(t),this.renderNavigation(),this.attachEventListeners()}}document.addEventListener("DOMContentLoaded",(()=>{NavigationManager.init()}));
function initializeApp(){console.log("🚀 Starting KC Home App..."),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",startApp):startApp()}function startApp(){try{console.log("📱 Initializing navigation..."),initNavigationConfig(),console.log("🎬 Initializing content sections..."),ContentRenderer.initAllSections(),setupGlobalEventHandlers(),console.log("✅ KC Home App initialized successfully!")}catch(n){console.error("❌ Error initializing app:",n)}}function setupGlobalEventHandlers(){window.handleContinueWatching=function(n){console.log("Continue watching:",n),console.log(`Continuar viendo ${n.serieTitle} - T${n.season}E${n.episode}`)},window.handleContentClick=function(n){console.log("Content clicked:",n),console.log("Ver detalles de:",n.title)}}initializeApp();
